/*
 * Copyright (c) 2008, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Willow Garage, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "pose_tool.h"
#include <rviz/viewport_mouse_event.h>
#include <rviz/display_context.h>
#include <rviz/selection/selection_manager.h>
#include <rviz/visualization_manager.h>
#include <rviz/view_manager.h>
#include <rviz/render_panel.h>
#include <rviz/ogre_helpers/arrow.h>
#include <rviz/tool_manager.h>

#include <OgreCamera.h>
#include <OgreRay.h>
#include <OgreViewport.h>
#include <OgrePlane.h>
#include <OgreCamera.h>
#include <OgreRay.h>
#include <cmath>
#include <cstdlib>  // for abs
#include <vector>
#include <string>

namespace rviz
{

Pose3DTool::Pose3DTool() 
  : Tool()
  , main_arrow_(nullptr)
  , current_state_(Position)
  , current_angle_(0.0)
  , selected_position_(Ogre::Vector3::ZERO)
  , standard_cursor_(Qt::ArrowCursor)
  , crosshair_cursor_(Qt::CrossCursor)
{
  ROS_INFO("Pose3DTool: ÂÆåÊï¥ÁâàÊú¨ÊûÑÈÄ†");
}

Pose3DTool::~Pose3DTool()
{
  ROS_INFO("Pose3DTool: ÂÆåÊï¥ÁâàÊú¨ÊûêÊûÑ");
  safeDeleteArrow();
}

void Pose3DTool::onInitialize()
{
  ROS_INFO("=== Pose3DTool::onInitialize() ÂÆåÊï¥ÁâàÊú¨ ===");
  
  // ÂàùÂßãÂåñÁÆ≠Â§¥ÊòæÁ§∫
  initializeMainArrow();
  
  ROS_INFO("=== Pose3DTool ÂÆåÊï¥ÁâàÊú¨ÂàùÂßãÂåñÂÆåÊàê ===");
}

void Pose3DTool::activate()
{
  ROS_INFO("activate() - ËøõÂÖ•‰ΩçÁΩÆÈÄâÊã©Ê®°Âºè");
  
  // ÈáçÁΩÆÂ∑•ÂÖ∑Áä∂ÊÄÅ
  resetTool();
  
  // ËÆæÁΩÆÂÖâÊ†á‰∏∫ÂçÅÂ≠óÂΩ¢
  context_->getViewManager()->getRenderPanel()->setCursor(crosshair_cursor_);
  
  // ËÆæÁΩÆÁä∂ÊÄÅÊòæÁ§∫
  setStatus("Êåâ‰ΩèÂ∑¶ÈîÆÊãñÊãΩËÆæÁΩÆÁõÆÊ†á‰ΩçÁΩÆÂíåÊñπÂêëÔºåÂè≥ÈîÆÈÄÄÂá∫Â∑•ÂÖ∑");
  
  ROS_INFO("activate() ÂÆåÊàê");
}

void Pose3DTool::deactivate()
{
  ROS_INFO("deactivate() - Â∑•ÂÖ∑ÂÅúÁî®");
  
  // ÈöêËóèÁÆ≠Â§¥
  safeHideArrow();
  
  // ÊÅ¢Â§çÊ†áÂáÜÂÖâÊ†á
  context_->getViewManager()->getRenderPanel()->setCursor(standard_cursor_);
  
  // ÈáçÁΩÆÁä∂ÊÄÅ
  resetTool();
}

int Pose3DTool::processMouseEvent(ViewportMouseEvent& event)
{
  // ROS_INFO("=== processMouseEvent: Áä∂ÊÄÅ=%d, ‰∫ã‰ª∂Á±ªÂûã=%d ===", current_state_, event.type);
  
  // Ê†πÊçÆÂΩìÂâçÁä∂ÊÄÅÂàÜÂèë‰∫ã‰ª∂Â§ÑÁêÜ
  if (current_state_ == Position)
  {
    return processPositionState(event);
  }
  else if (current_state_ == Orientation)
  {
    return processOrientationState(event);
  }
  
  ROS_INFO("Êú™Áü•Áä∂ÊÄÅÔºåË∑≥Ëøá‰∫ã‰ª∂Â§ÑÁêÜ");
  return 0;
}

// ==================== ‰ΩçÁΩÆÈÄâÊã©Áä∂ÊÄÅÂ§ÑÁêÜ ====================

int Pose3DTool::processPositionState(ViewportMouseEvent& event)
{
  // ËØ¶ÁªÜ‰∫ã‰ª∂Á±ªÂûãÊó•Âøó
  // ROS_INFO("=== processPositionState: ‰∫ã‰ª∂Á±ªÂûã=%d, leftDown=%s, rightDown=%s ===", 
  //          event.type, event.leftDown() ? "true" : "false", event.rightDown() ? "true" : "false");
  
  if (event.type == QEvent::MouseMove)
  {
    // Âú®‰ΩçÁΩÆÈÄâÊã©Áä∂ÊÄÅ‰∏ãÔºåÈº†Ê†áÁßªÂä®Êó∂Êèê‰æõÁÆÄÂçïÁöÑÁä∂ÊÄÅÊõ¥Êñ∞
    // ROS_INFO("‰ΩçÁΩÆÈÄâÊã©Áä∂ÊÄÅÔºöÈº†Ê†áÁßªÂä® - Èº†Ê†á‰ΩçÁΩÆ(%d, %d)", event.x, event.y);
    return 0; // ‰∏çÈúÄË¶ÅÈáçÊñ∞Ê∏≤Êüì
  }
  else if (event.type == QEvent::MouseButtonPress && event.right())
  {
    // Âè≥ÈîÆÁõ¥Êé•ÈÄÄÂá∫Â∑•ÂÖ∑
    ROS_INFO("=== ‰ΩçÁΩÆÈÄâÊã©Áä∂ÊÄÅÔºöÂè≥ÈîÆÈÄÄÂá∫Â∑•ÂÖ∑ ===");
    cancelOperation(true);  // ÂÆåÂÖ®ÂèñÊ∂àÂ∑•ÂÖ∑ÊøÄÊ¥ª
    return Render;
  }
  else if (event.rightDown())
  {
    // Âè≥ÈîÆÊåâ‰∏ãÁä∂ÊÄÅÔºå‰πüÊâßË°åÈÄÄÂá∫Â∑•ÂÖ∑
    ROS_INFO("=== ‰ΩçÁΩÆÈÄâÊã©Áä∂ÊÄÅÔºöÂè≥ÈîÆÊåâ‰∏ãÈÄÄÂá∫Â∑•ÂÖ∑ ===");
    cancelOperation(true);
    return Render;
  }
  else if (event.type == QEvent::MouseButtonPress && event.left())
  {
    ROS_INFO("=== Èº†Ê†áÊåâ‰∏ãÔºöÂºÄÂßã‰ΩçÁΩÆÈÄâÊã©ÂíåÊãñÊãΩÔºÅÂùêÊ†á(%d, %d) ===", event.x, event.y);
    
    // ‰øùÂ≠òÂàùÂßãÁÇπÂáª‰ΩçÁΩÆÔºàRVizÁªèÂÖ∏2D Nav GoalÊñπÂºèÔºâ
    initial_click_x_ = event.x;
    initial_click_y_ = event.y;
    ROS_INFO("‰øùÂ≠òÂàùÂßãÁÇπÂáª‰ΩçÁΩÆ: (%d, %d)", initial_click_x_, initial_click_y_);
    
    // ÁúüÊ≠£ÁöÑ3DÁÇπÈÄâÊã©ÔºàÂ∑≤È™åËØÅÂ∑•‰ΩúÊ≠£Â∏∏Ôºâ
    ROS_INFO("ÂºÄÂßãË∞ÉÁî®get3DPointFromSelection...");
    Ogre::Vector3 position;
    bool selection_success = get3DPointFromSelection(event, position);
    ROS_INFO("get3DPointFromSelectionÁªìÊûú: %s", selection_success ? "ÊàêÂäü" : "Â§±Ë¥•");
    
    if (selection_success)
    {
      // ÊàêÂäüËé∑Âèñ3DÁÇπÔºå‰øùÂ≠ò‰ΩçÁΩÆÂπ∂ÂàáÊç¢Âà∞ÊñπÂêëËÆæÁΩÆÁä∂ÊÄÅ
      selected_position_ = position;
      current_state_ = Orientation;
      current_angle_ = 0.0;  // ÂàùÂßãËßíÂ∫¶
      
      ROS_INFO("‚úÖ ‰ΩçÁΩÆÈÄâÊã©ÂÆåÊàê: (%.3f, %.3f, %.3f)ÔºåÂàáÊç¢Âà∞ÊñπÂêëËÆæÁΩÆÁä∂ÊÄÅ", 
               position.x, position.y, position.z);
      
      // Êõ¥Êñ∞Áä∂ÊÄÅÊòæÁ§∫
      setStatus("ÊãñÊãΩ‰∏≠...ÊùæÂºÄÈº†Ê†áÁ°ÆËÆ§ÊñπÂêëÔºåÂè≥ÈîÆÈÄÄÂá∫Â∑•ÂÖ∑");
      
      // ÂàõÂª∫ÊñπÂêëÊåáÁ§∫ÁÆ≠Â§¥
      ROS_INFO("ÂàõÂª∫ÊñπÂêëÊåáÁ§∫ÁÆ≠Â§¥...");
      createOrientationArrow(position);
      
      return Render;
    }
    else
    {
      ROS_WARN("‚ö†Ô∏è Êó†Ê≥ïÂú®Ê≠§‰ΩçÁΩÆËé∑ÂèñÊúâÊïàÁöÑ3DÁÇπÔºåÂùêÊ†á(%d, %d) - ËØ∑Â∞ùËØïÁÇπÂáªÊúâÂá†‰Ωï‰ΩìÁöÑÂå∫Âüü", event.x, event.y);
      setStatus("ÁÇπÂáª‰∫ÜÁ©∫ÁôΩÂå∫ÂüüÔºåËØ∑ÁÇπÂáªÊúâÂá†‰Ωï‰ΩìÁöÑ‰ΩçÁΩÆ");
      return 0;
    }
  }
  else
  {
    ROS_INFO("processPositionState: Êú™Â§ÑÁêÜÁöÑ‰∫ã‰ª∂Á±ªÂûã %d", event.type);
  }
  
  return 0;
}

// ==================== ÊñπÂêëËÆæÁΩÆÁä∂ÊÄÅÂ§ÑÁêÜ ====================

int Pose3DTool::processOrientationState(ViewportMouseEvent& event)
{
  // ROS_INFO("=== processOrientationState: ‰∫ã‰ª∂Á±ªÂûã=%d, left=%s, leftDown=%s ===", 
  //          event.type, event.left() ? "true" : "false", event.leftDown() ? "true" : "false");
  
  if (event.type == QEvent::MouseMove && event.left())
  {
    // ÊãñÊãΩ‰∏≠ÔºöÂÆûÊó∂Êõ¥Êñ∞ÊñπÂêëÈ¢ÑËßà
    // ROS_INFO("ÊãñÊãΩ‰∏≠ÔºöÊõ¥Êñ∞ÊñπÂêëÈ¢ÑËßàÔºåÂùêÊ†á(%d, %d)", event.x, event.y);
    updateOrientationFromMouse(event);
    updateOrientationArrow();
    return Render;
  }
  else if (event.type == QEvent::MouseButtonRelease)
  {
    // Èº†Ê†áÊùæÂºÄÔºöÁ°ÆËÆ§ÊúÄÁªà‰ΩçÁΩÆÂíåÊñπÂêë
    ROS_INFO("=== Èº†Ê†áÊùæÂºÄÔºöÊñπÂêëËÆæÁΩÆÂÆåÊàêÔºÅ‰∫ã‰ª∂ËØ¶ÊÉÖ: left=%s ===", 
             event.left() ? "true" : "false");
    
    // Á°Æ‰øùËßíÂ∫¶ÊòØÊúÄÊñ∞ÁöÑ
    updateOrientationFromMouse(event);
    
    ROS_INFO("‚úÖ ÊúÄÁªàÁõÆÊ†á: ‰ΩçÁΩÆ(%.3f, %.3f, %.3f), ËßíÂ∫¶%.1f¬∞", 
             selected_position_.x, selected_position_.y, selected_position_.z,
             current_angle_ * 180.0 / M_PI);
    
    // ÂèëÂ∏ÉÊúÄÁªàÁõÆÊ†áÔºà‰ΩøÁî®ÂéüÂßãËÆ°ÁÆóÁöÑÁõÆÊ†áËßíÂ∫¶Ôºå‰∏çÊòØÊòæÁ§∫Áî®ÁöÑÂèçÂêëËßíÂ∫¶Ôºâ
    ROS_INFO("üì§ ÂèëÂ∏ÉÁõÆÊ†áËßíÂ∫¶: ÊòæÁ§∫ËßíÂ∫¶%.1f¬∞ -> ÁõÆÊ†áËßíÂ∫¶%.1f¬∞", 
             current_angle_ * 180.0 / M_PI, target_angle_ * 180.0 / M_PI);
    onPoseSet(selected_position_.x, selected_position_.y, selected_position_.z, target_angle_);
    
    // ÈöêËóèÁÆ≠Â§¥Ôºå‰ΩÜ‰∏çÈáçÁΩÆÂ∑•ÂÖ∑Áä∂ÊÄÅÔºå‰øùÊåÅÂ∑•ÂÖ∑ÊøÄÊ¥ª
    safeHideArrow();
    current_state_ = Position;  // ÂõûÂà∞‰ΩçÁΩÆÈÄâÊã©Áä∂ÊÄÅÔºåÂáÜÂ§á‰∏ã‰∏Ä‰∏™ÁõÆÊ†á
    setStatus("Êåâ‰ΩèÂ∑¶ÈîÆÊãñÊãΩËÆæÁΩÆÁõÆÊ†á‰ΩçÁΩÆÂíåÊñπÂêëÔºåÂè≥ÈîÆÈÄÄÂá∫Â∑•ÂÖ∑");
    
    return Render;  // ÁßªÈô§FinishedÊ†áÂøóÔºå‰øùÊåÅÂ∑•ÂÖ∑ÊøÄÊ¥ª
  }
  else if (event.type == QEvent::MouseMove && !event.left())
  {
    // Èº†Ê†áÁßªÂä®‰ΩÜÊ≤°ÊúâÊåâ‰∏ãÔºöÂèØËÉΩÊòØÊÑèÂ§ñÊÉÖÂÜµÔºåËÆ∞ÂΩï‰ΩÜ‰∏çÂ§ÑÁêÜ
    ROS_INFO("ÊñπÂêëÁä∂ÊÄÅ‰∏ãÈº†Ê†áÁßªÂä®‰ΩÜÊó†ÊåâÈîÆÔºåÂùêÊ†á(%d, %d)", event.x, event.y);
    return 0;
  }
  else if (event.type == QEvent::MouseButtonPress && event.right())
  {
    // Âè≥ÈîÆÁõ¥Êé•ÈÄÄÂá∫Â∑•ÂÖ∑
    ROS_INFO("=== ÊñπÂêëËÆæÁΩÆÁä∂ÊÄÅÔºöÂè≥ÈîÆÈÄÄÂá∫Â∑•ÂÖ∑ ===");
    cancelOperation(true);  // ÂÆåÂÖ®ÂèñÊ∂àÂ∑•ÂÖ∑ÊøÄÊ¥ª
    return Render;
  }
  else if (event.rightDown())
  {
    // Âè≥ÈîÆÊåâ‰∏ãÁä∂ÊÄÅÔºå‰πüÊâßË°åÈÄÄÂá∫Â∑•ÂÖ∑
    ROS_INFO("=== ÊñπÂêëËÆæÁΩÆÁä∂ÊÄÅÔºöÂè≥ÈîÆÊåâ‰∏ãÈÄÄÂá∫Â∑•ÂÖ∑ ===");
    cancelOperation(true);
    return Render;
  }
  else
  {
    ROS_INFO("processOrientationState: Êú™Â§ÑÁêÜÁöÑ‰∫ã‰ª∂ - Á±ªÂûã=%d, left=%s", 
             event.type, event.left() ? "true" : "false");
  }
  
  return 0;
}

// ==================== 3DÁÇπÈÄâÊã©ÂÆûÁé∞ ====================

bool Pose3DTool::get3DPointFromSelection(ViewportMouseEvent& event, Ogre::Vector3& result_pos)
{
  ROS_INFO("=== get3DPointFromSelection ÂºÄÂßã ===");
  
  if (!context_)
  {
    ROS_ERROR("Display context‰∏∫Á©∫");
    return false;
  }
  
  // Ê£ÄÊü•ÂøÖË¶ÅÁöÑÁªÑ‰ª∂
  if (!context_->getSelectionManager())
  {
    ROS_ERROR("SelectionManager‰∏∫Á©∫");
    return false;
  }
  
  if (!event.viewport)
  {
    ROS_ERROR("Viewport‰∏∫Á©∫");
    return false;
  }
  
  ROS_INFO("Â∞ùËØï‰ΩøÁî®SelectionManagerËé∑Âèñ3DÁÇπ...");
  
  try 
  {
    // Á°Æ‰øùÊàë‰ª¨ÊúâÊúâÊïàÁöÑSelectionManager
    SelectionManager* sel_mgr = context_->getSelectionManager();
    if (!sel_mgr)
    {
      ROS_ERROR("SelectionManager‰∏∫Á©∫");
      return false;
    }
    
    // ÂÖ≥ÈîÆÔºöÁ°Æ‰øùSelectionManagerÂ∑≤ÁªèÂàùÂßãÂåñÔºå‰ΩÜ‰∏çÂº∫Âà∂ÈáçÂ§çÂàùÂßãÂåñ
    try 
    {
      sel_mgr->initialize();
    }
    catch (...)
    {
      // ÂàùÂßãÂåñÂèØËÉΩÂ∑≤ÁªèÂÆåÊàêÔºåÂøΩÁï•ÂºÇÂ∏∏
    }
    
    // ÈáçË¶ÅÔºöÁ°Æ‰øùviewportÂíåÁõ∏Êú∫Áä∂ÊÄÅÊ≠£Á°Æ
    if (!event.viewport)
    {
      ROS_ERROR("Viewport‰∏∫Á©∫");
      return false;
    }
    
    Ogre::Camera* camera = event.viewport->getCamera();
    if (!camera)
    {
      ROS_ERROR("Áõ∏Êú∫‰∏∫Á©∫");
      return false;
    }
    
    // Ê£ÄÊü•Èº†Ê†áÂùêÊ†áÊòØÂê¶Âú®viewportËåÉÂõ¥ÂÜÖ
    int vp_width = event.viewport->getActualWidth();
    int vp_height = event.viewport->getActualHeight();
    
    if (event.x < 0 || event.x >= vp_width || event.y < 0 || event.y >= vp_height)
    {
      ROS_WARN("Èº†Ê†áÂùêÊ†áË∂ÖÂá∫viewportËåÉÂõ¥: (%d, %d) in %dx%d", 
               event.x, event.y, vp_width, vp_height);
      return false;
    }
    
    ROS_INFO("Ë∞ÉÁî®SelectionManager::get3DPointÂùêÊ†á(%d, %d) Âú®viewport %dx%d", 
              event.x, event.y, vp_width, vp_height);
    
    // ÈáçË¶ÅÔºöÁ°Æ‰øùSelectionManagerÊúâÊúÄÊñ∞ÁöÑÊ∏≤ÊüìÊï∞ÊçÆÔºå‰ΩÜË¶ÅÂÆâÂÖ®Âú∞Ë∞ÉÁî®
    try 
    {
      context_->queueRender();
    }
    catch (...)
    {
      ROS_WARN("queueRenderË∞ÉÁî®Â§±Ë¥•");
    }
    
    // ÂÖ≥ÈîÆÔºöÂú®try-catch‰øùÊä§‰∏ãË∞ÉÁî®SelectionManager
    bool success = false;
    try 
    {
      ROS_INFO("Ê≠£Âú®Ë∞ÉÁî® sel_mgr->get3DPoint...");
      // ËøôÊòØSelectionManagerÁöÑÊ≠£Á°ÆË∞ÉÁî®ÊñπÂºè
      success = sel_mgr->get3DPoint(event.viewport, event.x, event.y, result_pos);
      ROS_INFO("sel_mgr->get3DPoint Ë∞ÉÁî®ÂÆåÊàêÔºåËøîÂõûÂÄº: %s", success ? "true" : "false");
    }
    catch (const Ogre::Exception& e)
    {
      ROS_ERROR("SelectionManagerË∞ÉÁî®Êó∂OgreÂºÇÂ∏∏: %s", e.what());
      return false;
    }
    catch (const std::exception& e) 
    {
      ROS_ERROR("SelectionManagerË∞ÉÁî®Êó∂Ê†áÂáÜÂºÇÂ∏∏: %s", e.what());
      return false;
    }
    catch (...)
    {
      ROS_ERROR("SelectionManagerË∞ÉÁî®Êó∂Êú™Áü•ÂºÇÂ∏∏");
      return false;
    }
    
    if (success)
    {
      // È™åËØÅËøîÂõûÁöÑÂùêÊ†áÊòØÂê¶ÊúâÊïà
      if (std::isfinite(result_pos.x) && std::isfinite(result_pos.y) && std::isfinite(result_pos.z))
      {
        ROS_INFO("SelectionManagerËé∑ÂèñÂéüÂßã3DÁÇπ: (%.3f, %.3f, %.3f)", 
                 result_pos.x, result_pos.y, result_pos.z);
        
        // Â∞ùËØï‰ΩøÁî®3DPatchËøõË°åÈ´òÂ∫¶Á≤æÂ∫¶ÊîπÂñÑ
        Ogre::Vector3 refined_pos;
        if (refineHeightUsing3DPatch(event, result_pos, refined_pos))
        {
          result_pos = refined_pos;
          ROS_INFO("È´òÂ∫¶Á≤æÂ∫¶ÊîπÂñÑÂêéÁöÑ3DÁÇπ: (%.3f, %.3f, %.3f)", 
                   result_pos.x, result_pos.y, result_pos.z);
        }
        
        return true;
      }
      else
      {
        ROS_WARN("SelectionManagerËøîÂõûÊó†ÊïàÂùêÊ†áÔºåÂåÖÂê´NaNÊàñInf");
        return false;
      }
    }
    else
    {
      ROS_WARN("SelectionManagerÊú™ÊâæÂà∞3DÁÇπÔºàÂèØËÉΩÁÇπÂáª‰∫ÜÁ©∫ÁôΩÂå∫ÂüüÊàñÊó†Âá†‰Ωï‰ΩìÔºâ");
      
      // ËΩªÈáèÁ∫ßÁä∂ÊÄÅÊ£ÄÊü•Ôºå‰∏çËøõË°åÁ†¥ÂùèÊÄßÊ∏ÖÁêÜ
      try 
      {
        // ‰ªÖÂú®ÂÆâÂÖ®ÁöÑÊÉÖÂÜµ‰∏ãËß¶Âèë‰∏ÄÊ¨°Ê∏≤Êüì
        if (context_)
        {
          context_->queueRender();
        }
      }
      catch (...)
      {
        // ÂøΩÁï•Ê∏≤ÊüìÂºÇÂ∏∏
      }
      ROS_INFO("SelectionManagerËøîÂõûfalseÔºåËØ∑Â∞ùËØïÁÇπÂáªÊúâÂá†‰Ωï‰ΩìÁöÑÂå∫Âüü");
      
      return false;
    }
  }
  catch (const std::exception& e)
  {
    ROS_ERROR("get3DPointFromSelectionÊï¥‰ΩìÂºÇÂ∏∏: %s", e.what());
    return false;
  }
  
  // Â¶ÇÊûúSelectionManagerÂ§±Ë¥•ÔºåËøîÂõûfalseË°®Á§∫Êó†Ê≥ïËé∑Âèñ3DÁÇπ
  ROS_WARN("SelectionManagerÊó†Ê≥ïËé∑Âèñ3DÁÇπ");
  
  // ËΩªÈáèÁ∫ßÈîôËØØÊÅ¢Â§çÔºå‰∏çÁ†¥ÂùèSelectionManagerÁä∂ÊÄÅ
  try 
  {
    if (context_)
    {
      context_->queueRender();
    }
  }
  catch (...)
  {
    // ÈùôÈªòÂ§ÑÁêÜÊ∏≤ÊüìÂºÇÂ∏∏
  }
  
  return false;
}

bool Pose3DTool::refineHeightUsing3DPatch(ViewportMouseEvent& event, const Ogre::Vector3& original_pos, Ogre::Vector3& refined_pos)
{
  try 
  {
    SelectionManager* sel_mgr = context_->getSelectionManager();
    if (!sel_mgr)
    {
      return false;
    }
    
    // ‰ΩøÁî®3x3ÁöÑpatchÊù•Ëé∑ÂèñÊõ¥Á≤æÁ°ÆÁöÑÈ´òÂ∫¶‰ø°ÊÅØ
    const int patch_size = 3;
    const int half_patch = patch_size / 2;
    
    std::vector<Ogre::Vector3> patch_points;
    bool patch_success = sel_mgr->get3DPatch(
      event.viewport,
      event.x - half_patch,  // ‰∏≠ÂøÉÂë®Âõ¥ÁöÑÂ∞èÂå∫Âüü
      event.y - half_patch,
      patch_size,
      patch_size,
      true,  // skip_missing = true
      patch_points
    );
    
    if (patch_success && !patch_points.empty())
    {
      // ËÆ°ÁÆóÊúâÊïàÁÇπÁöÑÂπ≥ÂùáÈ´òÂ∫¶
      float valid_z_sum = 0.0f;
      int valid_count = 0;
      
      for (const auto& point : patch_points)
      {
        if (std::isfinite(point.x) && std::isfinite(point.y) && std::isfinite(point.z))
        {
          valid_z_sum += point.z;
          valid_count++;
        }
      }
      
      if (valid_count > 0)
      {
        refined_pos = original_pos;
        refined_pos.z = valid_z_sum / valid_count;  // ‰ΩøÁî®Âπ≥ÂùáÈ´òÂ∫¶
        
        // Ê£ÄÊü•È´òÂ∫¶Â∑ÆÂºÇÊòØÂê¶ÂêàÁêÜ
        float height_diff = std::abs(refined_pos.z - original_pos.z);
        if (height_diff > 0.001f)  // Ë∂ÖËøá1mmÁöÑÂ∑ÆÂºÇÊâçËÆ∞ÂΩï
        {
          ROS_DEBUG("È´òÂ∫¶Á≤æÂ∫¶ÊîπÂñÑ: ÂéüÂßã=%.4f, ÊîπÂñÑÂêé=%.4f, Â∑ÆÂºÇ=%.4f", 
                   original_pos.z, refined_pos.z, height_diff);
        }
        
        return true;
      }
    }
    
    // PatchÊñπÊ≥ïÂ§±Ë¥•ÔºåÂ∞ùËØï‰ΩøÁî®Â∞ÑÁ∫øÊäïÂΩ±‰Ωú‰∏∫È´òÂ∫¶È™åËØÅ
    return refineHeightUsingRaycast(event, original_pos, refined_pos);
  }
  catch (const std::exception& e)
  {
    ROS_DEBUG("3DPatchÈ´òÂ∫¶ÊîπÂñÑÂ§±Ë¥•: %s", e.what());
    return false;
  }
}

bool Pose3DTool::refineHeightUsingRaycast(ViewportMouseEvent& event, const Ogre::Vector3& original_pos, Ogre::Vector3& refined_pos)
{
  try 
  {
    Ogre::Camera* camera = event.viewport->getCamera();
    if (!camera)
    {
      return false;
    }
    
    // Â∞ÜÂ±èÂπïÂùêÊ†áËΩ¨Êç¢‰∏∫Ê†áÂáÜÂåñÂùêÊ†á
    float norm_x = ((float)event.x / (float)event.viewport->getActualWidth()) * 2.0f - 1.0f;
    float norm_y = 1.0f - ((float)event.y / (float)event.viewport->getActualHeight()) * 2.0f;
    
    // ÂàõÂª∫Â∞ÑÁ∫ø
    Ogre::Ray ray = camera->getCameraToViewportRay(norm_x, norm_y);
    
    // ‰ΩøÁî®ÂéüÂßã‰ΩçÁΩÆÁöÑXYÂùêÊ†áÔºå‰ΩÜÁî®Â∞ÑÁ∫øÊäïÂΩ±È™åËØÅÈ´òÂ∫¶
    // ÂàõÂª∫‰∏Ä‰∏™Ê∞¥Âπ≥Èù¢ÈÄöËøáÂéüÂßãÁÇπ
    Ogre::Plane horizontal_plane(Ogre::Vector3::UNIT_Z, -original_pos.z);
    
    std::pair<bool, Ogre::Real> intersection = ray.intersects(horizontal_plane);
    if (intersection.first)
    {
      Ogre::Vector3 ray_point = ray.getPoint(intersection.second);
      
      // Ê£ÄÊü•Â∞ÑÁ∫øÊäïÂΩ±ÁÇπ‰∏éÂéüÂßãÁÇπÁöÑÊ∞¥Âπ≥Ë∑ùÁ¶ª
      float horizontal_dist = std::sqrt(
        (ray_point.x - original_pos.x) * (ray_point.x - original_pos.x) +
        (ray_point.y - original_pos.y) * (ray_point.y - original_pos.y)
      );
      
      // Â¶ÇÊûúÊ∞¥Âπ≥Ë∑ùÁ¶ªÂêàÁêÜÔºàÂ∞è‰∫é10cmÔºâÔºå‰ΩøÁî®Â∞ÑÁ∫øÊäïÂΩ±ÁöÑÈ´òÂ∫¶
      if (horizontal_dist < 0.1f)
      {
        refined_pos = original_pos;
        refined_pos.x = ray_point.x;  // ‰ΩøÁî®Â∞ÑÁ∫øÊäïÂΩ±ÁöÑÁ≤æÁ°ÆXY
        refined_pos.y = ray_point.y;
        
        ROS_DEBUG("Â∞ÑÁ∫øÊäïÂΩ±È´òÂ∫¶È™åËØÅ: Ê∞¥Âπ≥Ë∑ùÁ¶ª=%.4f", horizontal_dist);
        return true;
      }
    }
    
    return false;
  }
  catch (const std::exception& e)
  {
    ROS_DEBUG("Â∞ÑÁ∫øÊäïÂΩ±È´òÂ∫¶È™åËØÅÂ§±Ë¥•: %s", e.what());
    return false;
  }
}

// ==================== ÊñπÂêëÊõ¥Êñ∞ ====================

void Pose3DTool::updateOrientationFromMouse(ViewportMouseEvent& event)
{
  ROS_INFO("=== updateOrientationFromMouse Ë¢´Ë∞ÉÁî® ===");
  
  try
  {
    // Â≠¶‰π†Êõ¥‰ºòÈõÖÁöÑ3DÂπ≥Èù¢ÊäïÂΩ±ÊñπÊ≥ï
    // ÂàõÂª∫‰∏Ä‰∏™‰∏éÁõÆÊ†áÁÇπÂêåÈ´òÂ∫¶ÁöÑÊ∞¥Âπ≥Âπ≥Èù¢
    Ogre::Plane ground_plane(Ogre::Vector3::UNIT_Z, selected_position_.z);
    Ogre::Vector3 cur_pos;
    
    ROS_INFO("ÁõÆÊ†áÁÇπ‰ΩçÁΩÆ: (%.3f, %.3f, %.3f)", 
             selected_position_.x, selected_position_.y, selected_position_.z);
    
    // Â∞ÜÂΩìÂâçÈº†Ê†á‰ΩçÁΩÆÊäïÂΩ±Âà∞Âπ≥Èù¢‰∏ä
    if (getPointOnPlaneFromWindowXY(event.viewport, ground_plane, event.x, event.y, cur_pos))
    {
      ROS_INFO("Èº†Ê†áÊäïÂΩ±Âà∞Âπ≥Èù¢ÁöÑ‰ΩçÁΩÆ: (%.3f, %.3f, %.3f)", cur_pos.x, cur_pos.y, cur_pos.z);
      
      // ËÆ°ÁÆó‰ªéÁõÆÊ†áÁÇπÂà∞ÂΩìÂâçÊäïÂΩ±ÁÇπÁöÑËßíÂ∫¶Ôºà3D‰∏ñÁïåÂùêÊ†áÔºâ
      double dx_world = cur_pos.x - selected_position_.x;
      double dy_world = cur_pos.y - selected_position_.y;
      
      // Ê£ÄÊü•ÁßªÂä®Ë∑ùÁ¶ªÊòØÂê¶Ë∂≥Â§ü
      double distance_world = sqrt(dx_world * dx_world + dy_world * dy_world);
      if (distance_world < 0.05)  // ‰∏ñÁïåÂùêÊ†á‰∏ã5cmÁöÑÁßªÂä®
      {
        ROS_INFO("3D‰∏ñÁïåÁßªÂä®Ë∑ùÁ¶ªÂ§™Â∞è(%.3fm)Ôºå‰øùÊåÅÂΩìÂâçËßíÂ∫¶", distance_world);
        return;
      }
      
      // ÂàÜÂà´ËÆ°ÁÆóÊòæÁ§∫ËßíÂ∫¶ÂíåÁõÆÊ†áËßíÂ∫¶
      current_angle_ = atan2(-dy_world, -dx_world);  // ÁÆ≠Â§¥ÊòæÁ§∫Áî®ÔºàÂèçÂêëÔºâ
      target_angle_ = atan2(dy_world, dx_world);     // ÊúÄÁªàÁõÆÊ†áÁî®ÔºàÂéüÂßãÔºâ
      
      ROS_INFO("‚úÖ 3D‰∏ñÁïåËßíÂ∫¶: %.1f¬∞ (%.3fÂºßÂ∫¶), 3DÁßªÂä®Ë∑ùÁ¶ª: %.3fm", 
               current_angle_ * 180.0 / M_PI, current_angle_, distance_world);
      ROS_INFO("   3DÊñπÂêë: dx=%.3f, dy=%.3f", dx_world, dy_world);
    }
    else
    {
      ROS_WARN("Êó†Ê≥ïÂ∞ÜÈº†Ê†á‰ΩçÁΩÆÊäïÂΩ±Âà∞Âπ≥Èù¢ÔºåÂùêÊ†á(%d, %d)", event.x, event.y);
    }
  }
  catch (const std::exception& e)
  {
    ROS_ERROR("ÊñπÂêëÊõ¥Êñ∞ÂºÇÂ∏∏: %s", e.what());
  }
  
  ROS_INFO("=== updateOrientationFromMouse ÂÆåÊàê ===");
}

// ==================== 3DÂπ≥Èù¢ÊäïÂΩ±ÂÆûÁé∞ ====================

bool Pose3DTool::getPointOnPlaneFromWindowXY(Ogre::Viewport* viewport, const Ogre::Plane& plane, int x, int y, Ogre::Vector3& result_point)
{
  if (!viewport)
  {
    ROS_ERROR("Viewport‰∏∫Á©∫");
    return false;
  }
  
  Ogre::Camera* camera = viewport->getCamera();
  if (!camera)
  {
    ROS_ERROR("Áõ∏Êú∫‰∏∫Á©∫");
    return false;
  }
  
  try
  {
    // Â∞ÜÂ±èÂπïÂùêÊ†áËΩ¨Êç¢‰∏∫ÂΩí‰∏ÄÂåñËÆæÂ§áÂùêÊ†á
    float screen_x = static_cast<float>(x) / static_cast<float>(viewport->getActualWidth());
    float screen_y = static_cast<float>(y) / static_cast<float>(viewport->getActualHeight());
    
    // ÂàõÂª∫Â∞ÑÁ∫ø‰ªéÁõ∏Êú∫Âà∞Â±èÂπïÁÇπ
    Ogre::Ray ray = camera->getCameraToViewportRay(screen_x, screen_y);
    
    // ËÆ°ÁÆóÂ∞ÑÁ∫ø‰∏éÂπ≥Èù¢ÁöÑ‰∫§ÁÇπ
    std::pair<bool, Ogre::Real> intersection = ray.intersects(plane);
    
    if (intersection.first)
    {
      // Êúâ‰∫§ÁÇπÔºåËÆ°ÁÆó‰∫§ÁÇπ‰ΩçÁΩÆ
      result_point = ray.getPoint(intersection.second);
      ROS_INFO("Â∞ÑÁ∫ø‰∏éÂπ≥Èù¢Áõ∏‰∫§Ôºå‰∫§ÁÇπ: (%.3f, %.3f, %.3f)", 
               result_point.x, result_point.y, result_point.z);
      return true;
    }
    else
    {
      ROS_WARN("Â∞ÑÁ∫ø‰∏éÂπ≥Èù¢‰∏çÁõ∏‰∫§");
      return false;
    }
  }
  catch (const std::exception& e)
  {
    ROS_ERROR("Âπ≥Èù¢ÊäïÂΩ±ËÆ°ÁÆóÂºÇÂ∏∏: %s", e.what());
    return false;
  }
}

// ==================== ÁÆ≠Â§¥ÁÆ°ÁêÜ ====================

void Pose3DTool::initializeMainArrow()
{
  ROS_INFO("=== ÂºÄÂßãÂàùÂßãÂåñ‰∏ªÁÆ≠Â§¥ ===");
  
  try
  {
    if (!context_)
    {
      ROS_ERROR("context‰∏∫Á©∫ÔºåÊó†Ê≥ïÂàùÂßãÂåñÁÆ≠Â§¥");
      return;
    }
    
    if (!context_->getSceneManager())
    {
      ROS_ERROR("SceneManager‰∏∫Á©∫ÔºåÊó†Ê≥ïÂàùÂßãÂåñÁÆ≠Â§¥");
      return;
    }
    
    ROS_INFO("ÂàõÂª∫ArrowÂØπË±°...");
    main_arrow_ = new Arrow(context_->getSceneManager(), nullptr);
    
    if (!main_arrow_)
    {
      ROS_ERROR("ArrowÂØπË±°ÂàõÂª∫Â§±Ë¥•");
      return;
    }
    
    ROS_INFO("ËÆæÁΩÆÁÆ≠Â§¥Â±ûÊÄß...");
    main_arrow_->setScale(Ogre::Vector3(1.0f, 1.0f, 1.0f));
    
    // ÂÆâÂÖ®Ê£ÄÊü•SceneNode
    if (main_arrow_->getSceneNode())
    {
      main_arrow_->getSceneNode()->setVisible(false);
      ROS_INFO("ÁÆ≠Â§¥SceneNodeËÆæÁΩÆÊàêÂäü");
    }
    else
    {
      ROS_ERROR("ÁÆ≠Â§¥SceneNode‰∏∫Á©∫");
    }
    
    setArrowColor(1.0f, 0.0f, 1.0f, 1.0f); // Ê¥ãÁ∫¢Ëâ≤
    ROS_INFO("‚úÖ ‰∏ªÁÆ≠Â§¥ÂàùÂßãÂåñÊàêÂäü");
  }
  catch (const std::exception& e)
  {
    ROS_ERROR("‚ùå ÁÆ≠Â§¥ÂàùÂßãÂåñÂºÇÂ∏∏: %s", e.what());
    main_arrow_ = nullptr;
  }
}

void Pose3DTool::safeDeleteArrow()
{
  if (main_arrow_)
  {
    try
    {
      delete main_arrow_;
      main_arrow_ = nullptr;
      ROS_DEBUG("ÁÆ≠Â§¥Âà†Èô§ÊàêÂäü");
    }
    catch (const std::exception& e)
    {
      ROS_ERROR("ÁÆ≠Â§¥Âà†Èô§ÂºÇÂ∏∏: %s", e.what());
      main_arrow_ = nullptr;
    }
  }
}

void Pose3DTool::setArrowColor(float r, float g, float b, float a)
{
  if (main_arrow_)
  {
    try
    {
      main_arrow_->setColor(r, g, b, a);
      ROS_DEBUG("ÁÆ≠Â§¥È¢úËâ≤ËÆæÁΩÆ: (%.1f, %.1f, %.1f, %.1f)", r, g, b, a);
    }
    catch (const std::exception& e)
    {
      ROS_DEBUG("ÁÆ≠Â§¥È¢úËâ≤ËÆæÁΩÆÂºÇÂ∏∏: %s", e.what());
    }
  }
}

bool Pose3DTool::safeShowArrow()
{
  if (main_arrow_ && main_arrow_->getSceneNode())
  {
    main_arrow_->getSceneNode()->setVisible(true);
    return true;
  }
  return false;
}

void Pose3DTool::safeHideArrow()
{
  if (main_arrow_ && main_arrow_->getSceneNode())
  {
    main_arrow_->getSceneNode()->setVisible(false);
  }
}

// ==================== Â∑•ÂÖ∑Áä∂ÊÄÅÁÆ°ÁêÜ ====================

void Pose3DTool::resetTool()
{
  current_state_ = Position;
  current_angle_ = 0.0;
  target_angle_ = 0.0;
  selected_position_ = Ogre::Vector3::ZERO;
}

void Pose3DTool::cancelOperation(bool deactivate_tool)
{
  ROS_INFO("=== ÂèñÊ∂àÊìç‰ΩúÔºöÈáçÁΩÆÂ∑•ÂÖ∑Áä∂ÊÄÅ ===");
  
  // ÈöêËóèÊâÄÊúâÁÆ≠Â§¥
  safeHideArrow();
  
  // ÈáçÁΩÆÂ∑•ÂÖ∑Áä∂ÊÄÅ
  resetTool();
  
  if (deactivate_tool && context_)
  {
    // ÂàáÊç¢Âà∞InteractÂ∑•ÂÖ∑ÔºàÁ±ª‰ººESCË°å‰∏∫Ôºâ
    ROS_INFO("Âè≥ÈîÆÂèñÊ∂àÔºöÂàáÊç¢Âà∞InteractÂ∑•ÂÖ∑");
    Tool* interact_tool = findInteractTool();
    if (interact_tool)
    {
      context_->getToolManager()->setCurrentTool(interact_tool);
      ROS_INFO("Â∑≤ÂàáÊç¢Âà∞InteractÂ∑•ÂÖ∑");
    }
    else
    {
      // Â¶ÇÊûúÊâæ‰∏çÂà∞InteractÂ∑•ÂÖ∑ÔºåÂàôÂèñÊ∂àÂΩìÂâçÂ∑•ÂÖ∑
      context_->getToolManager()->setCurrentTool(nullptr);
      ROS_INFO("Êú™ÊâæÂà∞InteractÂ∑•ÂÖ∑ÔºåÂ∑•ÂÖ∑Â∑≤ÂèñÊ∂àÊøÄÊ¥ª");
    }
  }
  else
  {
    // Âè™ÈáçÁΩÆÁä∂ÊÄÅÔºå‰øùÊåÅÂ∑•ÂÖ∑ÊøÄÊ¥ª
    setStatus("Êåâ‰ΩèÂ∑¶ÈîÆÊãñÊãΩËÆæÁΩÆÁõÆÊ†á‰ΩçÁΩÆÂíåÊñπÂêëÔºåÂè≥ÈîÆÈÄÄÂá∫Â∑•ÂÖ∑");
    ROS_INFO("Êìç‰ΩúÂ∑≤ÂèñÊ∂àÔºåÂ∑•ÂÖ∑ÈáçÁΩÆ‰∏∫ÂàùÂßãÁä∂ÊÄÅ");
  }
}

Tool* Pose3DTool::findInteractTool()
{
  if (!context_ || !context_->getToolManager())
  {
    ROS_WARN("DisplayContextÊàñToolManager‰∏∫Á©∫");
    return nullptr;
  }
  
  ToolManager* tool_manager = context_->getToolManager();
  
  // Â∞ùËØïÂá†ÁßçÂ∏∏ËßÅÁöÑInteractÂ∑•ÂÖ∑ÂêçÁß∞
  std::vector<std::string> interact_names = {
    "rviz/Interact",
    "Interact", 
    "rviz/MoveCamera",
    "MoveCamera",
    "rviz/Select",
    "Select"
  };
  
  for (const std::string& name : interact_names)
  {
    for (int i = 0; i < tool_manager->numTools(); ++i)
    {
      Tool* tool = tool_manager->getTool(i);
      if (tool && tool->getClassId().toStdString() == name)
      {
        ROS_INFO("ÊâæÂà∞InteractÂ∑•ÂÖ∑: %s", name.c_str());
        return tool;
      }
    }
  }
  
  // Â¶ÇÊûúÊ≤°ÊâæÂà∞ÁâπÂÆöÁöÑÂ∑•ÂÖ∑ÔºåËøîÂõûÁ¨¨‰∏Ä‰∏™Â∑•ÂÖ∑ÔºàÈÄöÂ∏∏ÊòØÈªòËÆ§Â∑•ÂÖ∑Ôºâ
  if (tool_manager->numTools() > 0)
  {
    Tool* first_tool = tool_manager->getTool(0);
    if (first_tool)
    {
      ROS_INFO("‰ΩøÁî®Á¨¨‰∏Ä‰∏™Â∑•ÂÖ∑‰Ωú‰∏∫ÈªòËÆ§: %s", first_tool->getClassId().toStdString().c_str());
      return first_tool;
    }
  }
  
  ROS_WARN("Êú™ÊâæÂà∞‰ªª‰ΩïÂèØÁî®ÁöÑÂ∑•ÂÖ∑");
  return nullptr;
}

// ==================== Á©∫ÂÆûÁé∞ÊñπÊ≥ï (‰øùÊåÅÂÖºÂÆπÊÄß) ====================

int Pose3DTool::processHeightState(ViewportMouseEvent& event) { return 0; }
void Pose3DTool::updateHeightIndicators() {}
void Pose3DTool::createHeightArrow(const Ogre::Vector3& position, double angle) {}
void Pose3DTool::clearHeightIndicators() {}
void Pose3DTool::updateOrientationArrow()
{
  if (!main_arrow_ || !main_arrow_->getSceneNode())
  {
    return;
  }
  
  try 
  {
    // ËÆæÁΩÆÁÆ≠Â§¥‰ΩçÁΩÆ
    main_arrow_->setPosition(selected_position_);
    
    // ‰øÆÊ≠£ÁÆ≠Â§¥ÊñπÂêëÔºöRViz ArrowÈªòËÆ§Âêë‰∏ã(-ZËΩ¥)ÔºåÈúÄË¶ÅÊóãËΩ¨Âà∞Ê∞¥Âπ≥Èù¢
    // Á¨¨‰∏ÄÊ≠•ÔºöÂ∞ÜÈªòËÆ§ÁöÑÂêë‰∏ãÊñπÂêëÊóãËΩ¨Âà∞XËΩ¥Ê≠£ÊñπÂêëÔºàÂêëÂâçÔºâ
    Ogre::Quaternion orient_x;
    orient_x.FromAngleAxis(Ogre::Degree(90), Ogre::Vector3::UNIT_Y);  // ÁªïYËΩ¥ÊóãËΩ¨90Â∫¶Ôºå‰ªé-ZÂà∞+X
    
    // Á¨¨‰∫åÊ≠•ÔºöÂ∫îÁî®Êàë‰ª¨ËÆ°ÁÆóÁöÑËßíÂ∫¶ÔºàÁªïZËΩ¥ÊóãËΩ¨Ôºâ
    Ogre::Quaternion rotation;
    rotation.FromAngleAxis(Ogre::Radian(current_angle_), Ogre::Vector3::UNIT_Z);
    
         // Á¨¨‰∏âÊ≠•ÔºöÁªÑÂêàÊóãËΩ¨ÔºàÂ¶ÇÊûúÊñπÂêëËøòÊòØÂèçÁöÑÔºåÂèØ‰ª•Â∞ùËØï orient_x * rotationÔºâ
     Ogre::Quaternion final_orientation = rotation * orient_x;
     main_arrow_->setOrientation(final_orientation);
     
     ROS_INFO("ÁÆ≠Â§¥ÊñπÂêëËÆæÁΩÆ: Âü∫ÂáÜÊóãËΩ¨90¬∞(YËΩ¥) + ËßíÂ∫¶%.1f¬∞(ZËΩ¥)", current_angle_ * 180.0 / M_PI);
    
    // Á°Æ‰øùÁÆ≠Â§¥ÂèØËßÅ
    main_arrow_->getSceneNode()->setVisible(true);
    
    ROS_INFO("ÁÆ≠Â§¥Êõ¥Êñ∞: ‰ΩçÁΩÆ(%.3f, %.3f, %.3f), ËßíÂ∫¶%.1f¬∞", 
              selected_position_.x, selected_position_.y, selected_position_.z,
              current_angle_ * 180.0 / M_PI);
  }
  catch (const std::exception& e)
  {
    ROS_WARN("ÁÆ≠Â§¥Êõ¥Êñ∞ÂºÇÂ∏∏: %s", e.what());
  }
}

void Pose3DTool::createOrientationArrow(const Ogre::Vector3& position)
{
  // Á°Æ‰øùÁÆ≠Â§¥Â∑≤ÂàùÂßãÂåñ
  if (!main_arrow_)
  {
    initializeMainArrow();
  }
  
  if (main_arrow_)
  {
    // ËÆæÁΩÆÁÆ≠Â§¥ÂàùÂßã‰ΩçÁΩÆÂíåÊñπÂêë
    main_arrow_->setPosition(position);
    
    // ÂàùÂßãÊñπÂêëÊåáÂêëXËΩ¥Ê≠£ÊñπÂêëÔºà0Â∫¶Ôºâ
    current_angle_ = 0.0;
    
    // ‰ΩøÁî®‰∏éupdateOrientationArrowÁõ∏ÂêåÁöÑÊñπÂêëËÆæÁΩÆÈÄªËæë
    Ogre::Quaternion orient_x;
    orient_x.FromAngleAxis(Ogre::Degree(90), Ogre::Vector3::UNIT_Y);  // ‰ªé-ZÂà∞+X
    Ogre::Quaternion rotation;
    rotation.FromAngleAxis(Ogre::Radian(current_angle_), Ogre::Vector3::UNIT_Z);
    Ogre::Quaternion initial_orientation = rotation * orient_x;
    main_arrow_->setOrientation(initial_orientation);
    
    // ÊòæÁ§∫ÁÆ≠Â§¥
    safeShowArrow();
    
    ROS_INFO("ÊñπÂêëÁÆ≠Â§¥ÂàõÂª∫ÂÆåÊàêÔºå‰ΩçÁΩÆ: (%.3f, %.3f, %.3f)", 
             position.x, position.y, position.z);
    
    setStatus("ÊãñÊãΩÈº†Ê†áËÆæÁΩÆÁõÆÊ†áÊñπÂêëÔºåÊùæÂºÄÂ∑¶ÈîÆÁ°ÆËÆ§ÔºåÂè≥ÈîÆÈÄÄÂá∫Â∑•ÂÖ∑");
  }
}

void Pose3DTool::safeUpdateArrowOrientation() 
{
  updateOrientationArrow();
}

 } // namespace rviz